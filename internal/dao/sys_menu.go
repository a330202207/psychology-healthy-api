// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"

	"github.com/gogf/gf/v2/util/gconv"

	"github.com/a330202207/psychology-healthy-api/internal/dao/internal"
	"github.com/a330202207/psychology-healthy-api/internal/model"
	"github.com/a330202207/psychology-healthy-api/internal/model/entity"
)

// internalSysMenuDao is internal type for wrapping internal DAO implements.
type internalSysMenuDao = *internal.SysMenuDao

// sysMenuDao is the data access object for table sys_menu.
// You can define custom methods on it to extend its functionality as you wish.
type sysMenuDao struct {
	internalSysMenuDao
}

var (
	// SysMenu is globally public accessible object for table sys_menu operations.
	SysMenu = sysMenuDao{
		internal.NewSysMenuDao(),
	}
)

// Fill with you ideas below.

// IsUniqueName 菜单名称是否唯一
func (d *sysMenuDao) IsUniqueName(ctx context.Context, name string) (bool, error) {
	count, err := d.Ctx(ctx).Where("name", name).Count()
	if err != nil {
		return false, err
	}

	if count > 0 {
		return true, nil
	}
	return false, nil
}

// GenTreeList 树形菜单
func (d *sysMenuDao) GenTreeList(ctx context.Context, pid uint64, list []*entity.SysMenu) (treeList []*model.MenuTree) {
	treeList = make([]*model.MenuTree, 0, len(list))

	for _, v := range list {
		if v.Pid == pid {
			t := &model.MenuTree{
				SysMenu: v,
			}
			child := d.GenTreeList(ctx, gconv.Uint64(v.Id), list)
			if len(child) > 0 {
				t.Children = child
			}
			treeList = append(treeList, t)
		}
	}
	return
}
